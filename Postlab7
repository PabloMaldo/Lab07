/*
 * File:   main2.c
 * Author: pablo
 *
 * Created on April 13, 2023, 11:53 AM
 */

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)


// LIBRERIAS
#include <xc.h>
#include <stdint.h>

/*
 * Variables globales
 */
uint8_t contador;
uint8_t pot_val3;

/*
 * Constantes
 */
#define _XTAL_FREQ 8000000

/*
 * Prototipos de funcion
 */
void setup(void);

/*
 * Interrupciones
 */
void __interrupt() isr (void)
{
    if (PIR1bits.ADIF) // Inrerupcion del ADC
    {
        if (ADCON0bits.CHS == 0b0000){
            CCPR1L = (ADRESH>>1)+124;
            CCP1CONbits.DC1B1 = ADRESH & 0b01;
            CCP1CONbits.DC1B0 = ADRESL >> 7;
        }
        
        else if (ADCON0bits.CHS == 0b0001){
            CCPR2L = (ADRESH>>1)+124;
            CCP2CONbits.DC2B1 = ADRESH & 0b01;
            CCP2CONbits.DC2B0 = ADRESL >> 7; 
        }
        
        else
            pot_val3 = ADRESH;
        PIR1bits.ADIF = 0;
    }
    
    if (INTCONbits.T0IF) // Interrupcion del TMR0
    {
        contador++;
        if (contador < pot_val3) // cuando el valor del contador sea menor al de la conv del pot, enciende LED
            PORTCbits.RC3 = 1;
        else
            PORTCbits.RC3 = 0;
        TMR0 = 6;
        INTCONbits.T0IF = 0;
    }
}

/*
 * main
 */
  
void main (void) {
    setup();
    while (1) {
        if (ADCON0bits.GO == 0){
            if (ADCON0bits.CHS == 0b0000)
                ADCON0bits.CHS = 0b0001;
            else if (ADCON0bits.CHS == 0b0001)
                ADCON0bits.CHS == 0b0010;
            else
                ADCON0bits.CHS = 0b0000;
            
            __delay_us(1000);
            ADCON0bits.GO = 1;
        }
    }
    return;
}

/*
 * setup
 */
void setup(void){
    ANSEL = 0b00000111;     // AN0, AN1, AN2 como entradas analogicas
    ANSELH = 0;
    
    TRISA = 0b00000111;     // PORTA como salida, RA0 & RA1 como entradas
    PORTA = 0;              // limpiando PORTA
    
    TRISC = 0;              // PORTC como salida analogica
    PORTC = 0;              // Limpiando PORTC
    
    // configuracion del oscilador
    OSCCONbits.IRCF = 0b0111;   // 8MHz
    OSCCONbits.SCS = 1;         //Oscilador interno
    
    //Configuracion del ADC
    ADCON1bits.ADFM = 0;
    ADCON1bits.VCFG0 = 0;
    ADCON1bits.VCFG1 = 0;
    
    ADCON0bits.ADCS = 0b10;
    ADCON0bits.CHS = 0b0000;
    
    ADCON0bits.ADON = 1;
    __delay_us(50);
    
    //Configuracion del PWM
    TRISCbits.TRISC2 = 1;   //RC2/CCP1 como entrada
    TRISCbits.TRISC1 = 1;   //RC1/CCP2 como entrada
    
    CCP1CONbits.P1M = 0;    // mode single output (P1A modulated; P1B, P1C, P1D assigned as port pins) CCP1
    CCP1CONbits.CCP1M = 0b00001100;    // Modo PWM CCP1
    CCP2CONbits.CCP2M = 0b00001100;    // Modo PWM CCP2

    CCPR1L = 0x0F;          // Duty cycle inicial CCP1
    CCPR2L = 0x0F;          // Duty cycle inicial CCP2
    CCP1CONbits.DC1B1 = 0;  // bits menos significativos CCP1
    CCP1CONbits.DC1B0 = 0;  // bits menos singificativos CCP1
    CCP2CONbits.DC2B1 = 0;  // bits menos singificativos CCP2
    CCP2CONbits.DC2B0 = 0;  // bits menos singificativos CCP2

    // Configuracion del TMR0
    OPTION_REGbits.T0CS = 0;    // Temporizador
    OPTION_REGbits.PSA = 0;
    OPTION_REGbits.PS = 0b011; // prescaler 1:16
    TMR0 = 6;
    
    // Configuracion del TMR2
    PR2 = 255;
    T2CONbits.T2CKPS = 0b11;
    T2CONbits.TMR2ON = 1;
    PIR1bits.TMR2IF = 0;
    
    while (PIR1bits.TMR2IF == 0);
    PIR1bits.TMR2IF = 0;
    
    TRISCbits.TRISC2 = 0;       // RC2 como salida del PWM
    TRISCbits.TRISC1 = 0;       // RC1 como salida
    
    //Configuracion de las interuupciones
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    
    PIE1bits.ADIE = 1;
    INTCONbits.TMR0IE = 1;
    
    PIR1bits.ADIF = 0;
    INTCONbits.T0IF = 0;
}
